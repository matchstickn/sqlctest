// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: spinners.sql

package db

import (
	"context"
)

const getSpinner = `-- name: GetSpinner :one
SELECT userid, name, email, provider, tricks, expiresat, accesstoken, accesstokensecret, refreshtoken FROM spinners
WHERE spinners.UserID = $1 LIMIT 1
`

func (q *Queries) GetSpinner(ctx context.Context, userid int64) (Spinner, error) {
	row := q.db.QueryRow(ctx, getSpinner, userid)
	var i Spinner
	err := row.Scan(
		&i.Userid,
		&i.Name,
		&i.Email,
		&i.Provider,
		&i.Tricks,
		&i.Expiresat,
		&i.Accesstoken,
		&i.Accesstokensecret,
		&i.Refreshtoken,
	)
	return i, err
}

const getSpinnerTricks = `-- name: GetSpinnerTricks :many
SELECT spinners.Tricks 
FROM spinners
INNER JOIN tricks 
ON spinners.Tricks = tricks.name
WHERE spinners.UserID = $1
`

func (q *Queries) GetSpinnerTricks(ctx context.Context, userid int64) ([]*string, error) {
	rows, err := q.db.Query(ctx, getSpinnerTricks, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*string
	for rows.Next() {
		var tricks *string
		if err := rows.Scan(&tricks); err != nil {
			return nil, err
		}
		items = append(items, tricks)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
