// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tricks.sql

package db

import (
	"context"
)

const createTrick = `-- name: CreateTrick :one
INSERT INTO tricks 
(name, style, power) 
VALUES ($1, $2, $3) 
RETURNING id, name, style, power
`

type CreateTrickParams struct {
	Name  *string `db:"name" json:"name"`
	Style *int32  `db:"style" json:"style"`
	Power *bool   `db:"power" json:"power"`
}

func (q *Queries) CreateTrick(ctx context.Context, arg CreateTrickParams) (Trick, error) {
	row := q.db.QueryRow(ctx, createTrick, arg.Name, arg.Style, arg.Power)
	var i Trick
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Style,
		&i.Power,
	)
	return i, err
}

const deleteTrick = `-- name: DeleteTrick :exec
DELETE FROM tricks
WHERE id = $1
`

func (q *Queries) DeleteTrick(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTrick, id)
	return err
}

const getAllTricks = `-- name: GetAllTricks :many
SELECT id, name, style, power FROM tricks 
ORDER BY name
`

func (q *Queries) GetAllTricks(ctx context.Context) ([]Trick, error) {
	rows, err := q.db.Query(ctx, getAllTricks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trick
	for rows.Next() {
		var i Trick
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Style,
			&i.Power,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrick = `-- name: GetTrick :one
SELECT id, name, style, power FROM tricks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTrick(ctx context.Context, id int64) (Trick, error) {
	row := q.db.QueryRow(ctx, getTrick, id)
	var i Trick
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Style,
		&i.Power,
	)
	return i, err
}

const updateTrick = `-- name: UpdateTrick :one
UPDATE tricks
SET name = $2, style = $3, power = $4
WHERE id = $1
RETURNING id, name, style, power
`

type UpdateTrickParams struct {
	ID    int64   `db:"id" json:"id"`
	Name  *string `db:"name" json:"name"`
	Style *int32  `db:"style" json:"style"`
	Power *bool   `db:"power" json:"power"`
}

func (q *Queries) UpdateTrick(ctx context.Context, arg UpdateTrickParams) (Trick, error) {
	row := q.db.QueryRow(ctx, updateTrick,
		arg.ID,
		arg.Name,
		arg.Style,
		arg.Power,
	)
	var i Trick
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Style,
		&i.Power,
	)
	return i, err
}
